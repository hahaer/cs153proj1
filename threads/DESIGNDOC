            +--------------------+
            |        CS 153      |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+
                   
---- GROUP ----

Calvin Nguyen <cnguy072@ucr.edu>
Ryan Sabik <rsabi001@ucr.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

None.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to struct list_elem in list.h:
    int64_t  counter;   // counts how many remaining sleep ticks

Added to thread.c:
static struct list sleep_list; // global list containing all threads which are sleeping
    struct list * sleep_lister(void); // returns the address of the list sleep_list
    struct list_elem * thread_sleeper (struct list_elem *); // checks the int64_t counter if the 
thread needs to be taken off the sleep list

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

Push the current thread onto the sleep list, also setting the number of ticks passed into timer_sleep() onto the thread’s member variable int64_t counter. Block the thread.

Timer interrupt handler calls thread_tick() which has been modified.
thread_tick() iterates through the sleep list, decrementing int64_t counter by 1 for all elements in the list.
It loops again, checking if any counters are less than or equal to zero, unblocking such threads.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

None.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

timer_sleep() disables interrupts when it calls thread_block().

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Same as above.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This was the only design we had implemented correctly. If any other designs exists, they were scrapped while we were working on it.

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to struct semaphore in synch.h:
    struct thread * current_holder; // stores a pointer to the thread which holds this 
semaphore 

Added to struct lock in synch.h:
int old_priority; // Stores the thread’s original priority prior to donations

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

We replace the priority of the recipient with the highest donor in the wait_list for the lock. This priority is updated whenever any threads are added to the wait list. The old_priority is saved only once, for the initial donation. 

donor -> recipient

higher_donor -v       lower_donor ! -> X     recipient
        ---------------------------------------------->  ^


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

In sema_up, we iterate through the waitlist for the lock  pulling the highest priority thread from the list, removing it, and unblocking that thread.


>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

When the lock is taken, another call to lock_acquire() will do a check against the current thread’s priority versus the thread which holds the lock. If the current thread’s priority is greater, it will donate that priority to the lock holder thread. This holds true if other threads attempt to acquire this lock. Nested donations are not handled.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

Since there is a higher priority thread waiting, the lock holder has changed its priority. The lock holder restores its original priority via the old_priority member variable in struct lock. Then the highest priority thread is pulled from the wait list and is unblocked since it will be the next to acquire the lock. Then we yield to it.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

We tried, but it didn’t work.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This was the only design we had implemented correctly. 

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Debugging issues is extremely time consuming and difficult.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Alarm clock was not particularly insightful since it was an exercise in logic. Priority Scheduling is much more complicated than we thought.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

Tell students to look at the code housed in the test files to get an idea of what they’re attempting to test and how.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?



>> Any other comments?

No.
